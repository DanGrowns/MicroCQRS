@page "/authors"
@using Servicing.Queries
@using TinyCqrs.Interfaces
@using Domain.Models
@using Servicing.Features.Authors

@inject NavigationManager _navigationManager
@inject ICmdHandlerAsync<DeleteAuthorCmd> _deleteAuthorCmdHandler
@inject IQueryHandlerAsync<EmptyQry, List<Author>> _authorsQryHandler

<h1>Authors</h1>

<button type="button" class="btn btn-primary" @onclick="@Add">Add new</button>

<hr />

<div class="row" style="margin-top: 10px;">
    <table class="table table-striped table-bordered">
        <thead>
        <th></th>
        <th>Id</th>
        <th>Forename</th>
        <th>Surname</th>
        <th></th>
        </thead>
        <tbody>
        @foreach (var item in List)
        {
            <tr>
                <td>
                    <button type="button" class="btn btn-info" @onclick="@(() => Edit(item.Id))">Edit</button>
                </td>
                <td>@item.Id</td>
                <td>@item.Forename</td>
                <td>@item.Surname</td>
                <td>
                    <button type="button" class="btn btn-danger" @onclick="@(() => Delete(item))">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>

@code {
    private List<Author> List { get; set; }

    protected override async Task OnInitializedAsync()
        => List = await _authorsQryHandler.Get(new EmptyQry());
    
    private void Add()
        => _navigationManager.NavigateTo("/author");
    
    private void Edit(int id)
        => _navigationManager.NavigateTo($"/author/{id}");
    
    private async Task Delete(Author author)
    {
        var result = await _deleteAuthorCmdHandler.Execute(new DeleteAuthorCmd(author));
        if (result.IsSuccessful())
        {
            List.Remove(author);
            StateHasChanged();
        }
    }

}